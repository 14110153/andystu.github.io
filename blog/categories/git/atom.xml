<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | AndyZ Blog]]></title>
  <link href="http://andystu.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://andystu.github.io/"/>
  <updated>2014-12-27T11:27:18+08:00</updated>
  <id>http://andystu.github.io/</id>
  <author>
    <name><![CDATA[Yu-Chieh Chang (張又介)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Usage Notes]]></title>
    <link href="http://andystu.github.io/blog/2014/12/23/git-usage-notes/"/>
    <updated>2014-12-23T16:11:10+08:00</updated>
    <id>http://andystu.github.io/blog/2014/12/23/git-usage-notes</id>
    <content type="html"><![CDATA[<h2>Install git via homebrew</h2>

<p>$ brew install git # If we want to use gitk (git GUI), this way is very convinient. (however, I think SourceTree is better.)</p>

<h2>Git work processes</h2>

<ul>
<li>sign up a github account</li>
<li>create a repos (repository) with a &ldquo;name&rdquo;</li>
<li>then git it
&#8220;` bash

<h1>rails project</h1>

<p>$ rails new app
$ cd app
$ git init
$ git add .
$ git commit -m &lsquo;first commit&rsquo;</p></li>
</ul>


<p>$ git checkout -b branch_name
$ git branch # list branches in the project</p>

<h1>do some changes under this branch &hellip;</h1>

<p>$ git add .
$ git commit -am &lsquo;some thing in this brach&rsquo;</p>

<h1>more about <code>git commit</code></h1>

<p>$ git commit -am &lsquo;xxxx&rsquo; # == git add . + git commit -m &lsquo;xxxx&rsquo;
$ git commit &ndash;amend # reword commit message</p>

<h1>go back to master and merge it</h1>

<p>$ git checkout master
$ git merge branch_name</p>

<h1>push to github</h1>

<p>$ git remote add origin repos_git_ssh_url
$ git push &ndash;all # both master and branches
$ git push origin master # you also can push master to remote only</p>

<h1>reset or revert to HEAD version (HEAD refers to latest commit stage)</h1>

<p>$ git reset HEAD &ndash;hard # &ndash;hard is dangerous (delete unstaged files)
$ git reset HEAD &ndash;soft # &ndash;soft will go back and keep files staged
$ git reset HEAD # will go back without tracking unstaged files
$ git revert HEAD # make HEAD stage as new stage</p>

<h1>reset one file</h1>

<p>$ git checkout &ndash; <file></p>

<h1>conflick of rebase (merge is the same)</h1>

<p>$ git rebase master # under second branch</p>

<h1>conflick &hellip;</h1>

<h1>modify conflick <file></h1>

<h1>then</h1>

<p>$ git add <file>
$ git rebase &ndash;continue</p>

<h1>done.</h1>

<p>&#8220;`</p>
]]></content>
  </entry>
  
</feed>
