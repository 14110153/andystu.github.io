<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deploy | AndyZ's Blog]]></title>
  <link href="http://andystu.github.io/blog/categories/deploy/atom.xml" rel="self"/>
  <link href="http://andystu.github.io/"/>
  <updated>2015-02-16T10:26:36+08:00</updated>
  <id>http://andystu.github.io/</id>
  <author>
    <name><![CDATA[Yu-Chieh Chang (張又介)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Install and Deploy Redmine 2.6.x on Heroku]]></title>
    <link href="http://andystu.github.io/blog/2015/02/16/how-to-install-and-deploy-redmine-on-heroku/"/>
    <updated>2015-02-16T09:40:12+08:00</updated>
    <id>http://andystu.github.io/blog/2015/02/16/how-to-install-and-deploy-redmine-on-heroku</id>
    <content type="html"><![CDATA[<pre><code>$ git clone https://github.com/redmine/redmine.git -b 2.6-stable
$ cd redmine
</code></pre>

<h1>remove those files from .gitignore</h1>

<pre><code>Gemfile.lock
Gemfile.local
public/plugin_assets 
config/initializers/session_store.rb 
config/initializers/secret_token.rb 
config/configuration.yml 
config/email.yml
</code></pre>

<h1>remove those block from Gemfile</h1>

<pre><code>platforms :mri, :mingw do
  # Optional gem for exporting the gantt to a PNG file, not supported with jruby
  group :rmagick do
    # RMagick 2 supports ruby 1.9
    # RMagick 1 would be fine for ruby 1.8 but Bundler does not support
    # different requirements for the same gem on different platforms
    gem "rmagick", (RUBY_VERSION &lt; "1.9" ? "2.13.3" : "&gt;= 2.0.0")
  end

  # Optional Markdown support, not for JRuby
  group :markdown do
    # TODO: upgrade to redcarpet 3.x when ruby1.8 support is dropped
    gem "redcarpet", "~&gt; 2.3.0"
  end
end

platforms :jruby do
  # jruby-openssl is bundled with JRuby 1.7.0
  gem "jruby-openssl" if Object.const_defined?(:JRUBY_VERSION) &amp;&amp; JRUBY_VERSION &lt; '1.7.0'
  gem "activerecord-jdbc-adapter", "~&gt; 1.3.2"
end

# and
database_file = File.join(File.dirname(__FILE__), "config/database.yml") if File.exist?(database_file)
  database_config = YAML::load(ERB.new(IO.read(database_file)).result)
    ...
    else
  warn("No adapter found in config/database.yml, please configure it first") end
    else
warn("Please configure your config/database.yml first") end
</code></pre>

<h1>replace above block with this</h1>

<pre><code>group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
  gem 'thin' # change this if you want to use other rack web server
end
</code></pre>

<h1>bundle it without production</h1>

<pre><code>$ bundle install --without production test
</code></pre>

<h1>generate secret token for redmine</h1>

<pre><code>$ rake generate_secret_token
</code></pre>

<h1>create heroku app</h1>

<pre><code>$ heroku create APP_NAME
</code></pre>

<h1>To avoid aborting when deploying to heroku, we have to do the following two steps: In config/environment.rb we have to remove (or comment) line 10, where it says</h1>

<pre><code>exit 1
# remove it or comment it
# exit 1
</code></pre>

<h1>add this under config/application.rb</h1>

<pre><code>...
module RedmineApp
  classApplication&lt;Rails::Application
    config.assets.initialize_on_precompile = false # add this line
...
</code></pre>

<pre><code>$ git add -A
$ git commit -m "preparing for heroku" 
$ git push heroku 2.6-stable:master
</code></pre>

<pre><code>$ heroku run rake db:migrate
$ heroku run rake redmine:load_default_data
$ heroku open

# Logging into the application
# Use default administrator account to log in:
#
# login: admin
# password: admin
# 
</code></pre>

<h1>done and lets go to play redmine on heroku</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails App Deploy to Heroku : An Easy Way]]></title>
    <link href="http://andystu.github.io/blog/2015/01/06/rails-app-deploy-to-heroku-simple-how-to/"/>
    <updated>2015-01-06T23:24:04+08:00</updated>
    <id>http://andystu.github.io/blog/2015/01/06/rails-app-deploy-to-heroku-simple-how-to</id>
    <content type="html"><![CDATA[<h3>Preparing step</h3>

<ul>
<li>install Postgres DB via brew
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'><span class="nv">$ </span>brew install postgresql&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;if we want to run pg locally, we need to run the following instructions.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;To have launchd start postgresql at login:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ln -sfv /usr/local/opt/postgresql/*plist ~/Library/LaunchAgents&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Then to load and run postgresql immediately:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- download and install heroku toolkit
</span><span class='line'>https://toolbelt.heroku.com/
</span><span class='line'>- initialization of heroku under your rails project
</span><span class='line'>&lt;/code&gt; bash
</span><span class='line'><span class="nv">$ </span>heroku login
</span><span class='line'><span class="nv">$ </span>heroku create
</span><span class='line'>&lt;code&gt;
</span><span class='line'>- Open the file called Gemfile in your text editor and find the line containing:
</span><span class='line'>&lt;/code&gt; ruby
</span><span class='line'>gem <span class="p">&amp;</span>lsquo<span class="p">;</span>sqlite3<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
- Remove that line and replace it with:</p>

<pre><code class="ruby">group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
end
</code></pre>

<ul>
<li>bundle install
<code>ruby
$ bundle install --without production
</code></li>
<li>git add . and git commit
<code>bash
$ git add .
$ git commit -m "Changed Gemfile for heroku"
</code></li>
<li>finally, push to heroku
<code>bash
$ git push heroku master
$ heroku run rake db:migrate
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
